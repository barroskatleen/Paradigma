# Definição da classe para o nó da árvore
class No:
    def __init__(self, valor):
        self.valor = valor
        self.esquerda = None
        self.direita = None

# Função para construir a árvore com base nas regras
def construir_arvore(array):
    if not array:
        return None

    # Encontrar o maior valor e seu índice
    max_valor = max(array)
    indice = array.index(max_valor)

    # Criar o nó raiz com o maior valor
    no = No(max_valor)

    # Recursivamente construir os galhos da esquerda e direita
    no.esquerda = construir_arvore(array[:indice])
    no.direita = construir_arvore(array[indice+1:])

    return no

# Função para imprimir a árvore em formato de pré-ordem 
def imprimir_arvore(no, prefixo=""):
    if no is not None:
        print(prefixo + str(no.valor))
        imprimir_arvore(no.esquerda, prefixo + "  L-")
        imprimir_arvore(no.direita, prefixo + "  R-")

# ----------------------
# CENÁRIO 1
cenario1 = [3, 2, 1, 6, 0, 5]
arvore1 = construir_arvore(cenario1)
print("Árvore do Cenário 1:")
imprimir_arvore(arvore1)

# ----------------------
# CENÁRIO 2
print("\nÁrvore do Cenário 2:")
cenario2 = [7, 5, 13, 9, 1, 6, 4]
arvore2 = construir_arvore(cenario2)
imprimir_arvore(arvore2)
